/기존 자바스크립트 파일 구조:
public(index.html,manifst.json),src(components(app.js,Auth.js,Navigation.js,Nweet.js,NweetFactory.js,Router.js,survey.js,survey.css),routes(Auth.js,Home.js,Profile.js),fbase.js,index.js,style.css) 이렇게 구성되어 있는 코드로 자바스크립트를 통해 만들었어. 

/기존 전체 파일:
src\components\Nweet.js:

```
import React, { useState } from "react";
import { dbService } from "fbase";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome"; 
import { faTrash, faPencilAlt } from "@fortawesome/free-solid-svg-icons";

const Nweet = ({ nweetObj, isOwner }) => {
  const [editing, setEditing] = useState(false);
  const [newNweet, setNewNweet] = useState(nweetObj.text);
  const onDeleteClick = async () => {
    const ok = window.confirm("삭제하시겠습니까?");
    if (ok) {
      await dbService.doc(`nweets/${nweetObj.id}`).delete();
    }
  };
  const toggleEditing = () => setEditing((prev) => !prev);
  const onSubmit = async (event) => {
    event.preventDefault();
    await dbService.doc(`nweets/${nweetObj.id}`).update({
      text: newNweet,
    });
    setEditing(false);
  };
  const onChange = (event) => {
    const {
      target: { value },
    } = event;
    setNewNweet(value);
  };
  return (
    <div className="nweet">
      {editing ? (
        <>
          <form onSubmit={onSubmit} className="container nweetEdit">
            <input
              type="text"
              placeholder="여기에서 편집해주세요"
              value={newNweet}
              autoFocus
              onChange={onChange}
              className="formInput"
            />
            <input type="submit" value="편집완료" className="formBtn" />
          </form>
          <span onClick={toggleEditing} className="formBtn cancelBtn">
            취소
          </span>
        </>
      ) : (
        <>
          <h4>{nweetObj.text}</h4>
          {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}
          {isOwner && (
            <div className="nweet__actions">
            <span onClick={onDeleteClick}>
            <FontAwesomeIcon icon={faTrash} style={{ color: '#002333' }}/>
          </span>
          <span onClick={toggleEditing}>
            <FontAwesomeIcon icon={faPencilAlt} style={{ color: '#002333' }}/>
          </span>
        </div>
          )}
        </>
      )}
    </div>
  );
};

export default Nweet;
```

src/components/NweetFactory.js:
```
import React, { useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { storageService, dbService } from "fbase";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPlus, faTimes } from "@fortawesome/free-solid-svg-icons";

const NweetFactory = ({ userObj }) => {
  const [nweet, setNweet] = useState("");
  const [attachment, setAttachment] = useState("");
  const onSubmit = async (event) => {
    if (nweet === "") {
      return;
    }
    event.preventDefault();
    let attachmentUrl = "";
    if (attachment !== "") {
      const attachmentRef = storageService
        .ref()
        .child(`${userObj.uid}/${uuidv4()}`);
      const response = await attachmentRef.putString(attachment, "data_url");
      attachmentUrl = await response.ref.getDownloadURL();
    }
    const nweetObj = {
      text: nweet,
      createdAt: Date.now(),
      creatorId: userObj.uid,
      attachmentUrl,
    };
    await dbService.collection("nweets").add(nweetObj);
    setNweet("");
    setAttachment("");
  };
  const onChange = (event) => {
    const {
      target: { value },
    } = event;
    setNweet(value);
  };
  const onFileChange = (event) => {
    const {
      target: { files },
    } = event;
    const theFile = files[0];
    const reader = new FileReader();
    reader.onloadend = (finishedEvent) => {
      const {
        currentTarget: { result },
      } = finishedEvent;
      setAttachment(result);
    };
    reader.readAsDataURL(theFile);
  };
  const onClearAttachment = () => setAttachment("");
  return (
    <form onSubmit={onSubmit} className="factoryForm">
      <div className="factoryInput__container">
        <input
          className="factoryInput__input"
          value={nweet}
          onChange={onChange}
          type="text"
          placeholder="나의 말을 나만의 이모티콘으로"
          maxLength={200}
        />
        <input type="submit" value="&rarr;" className="factoryInput__arrow" />
      </div>
      <label for="attach-file" className="factoryInput__label">
      <span>이모티콘/사진 전송</span>
        <FontAwesomeIcon icon={faPlus} />
      </label>
      <input
        id="attach-file"
        type="file"
        accept="image/*"
        onChange={onFileChange}
        style={{
          opacity: 0,
        }}
      />
      
      {attachment && (
        <div className="factoryForm__attachment">
        <img
          src={attachment}
          style={{
            backgroundImage: attachment,
          }}
        />
        <div className="factoryForm__clear" onClick={onClearAttachment}>
          <span>삭제</span>
          <FontAwesomeIcon icon={faTimes} />
        </div>
        </div>
      )}
    </form>
  );
};
export default NweetFactory;
```
/사용한 툴:
firebase(npm install firebase@8.8.0), react(npm i react-router-dom@5.3.0), nvm use 14로 구버전 노드 사용 , axios

/현재 구현 완료한 기능:
로그인 기능,프로필 이름 편집 기능,실시간 글 올리기 기능,실시간으로 로컬에 있는 사진 올리기 기능,연결된 파이어 베이스에 사용자 정보 저장 기능, 연결된 파이어 베이스에 글 저장 기능,연결된 파이어 베이스에 사진 저장 기능,회원가입 후 설문조사 기능

/추가하고자 하는 기능:
1.사용자가 글을 쓰고, 이모티콘 전송 버튼을 누르면 axios를 통해 api를 호출
2.api에 사용자의 글과 creator id를 전송
3.api에서 이모티콘 3개를 받아와 사용자에게 미리 보기로 보여줌
4.사용자는 해당 이모티콘 3개 중에 한가지를 클릭하고 선택
5.사용자가 전송 버튼까지 누르면 채팅방에 사용자의 글과 이모티콘까지 전송
6. 글과 이모티콘 전송시 사용자의 프로필 이름을 가져와 프로필 이름과 같이 전송 
7. 프로필 이름이 없다면 user로 전송
8.글과 이모티콘은 파이어베이스에 저장됨

/이모티콘 전송 버튼 관련 요청 사항:
1.이모티콘 추천 버튼은 사진 추가 버튼 오른쪽에 같은 스타일 즉 같은 글씨체, 글씨 크기, 같은 형식으로 만들고 싶어
2.최종적으로 글이나 사진, 이모티콘 등을 전송하는 버튼은 기존의 전송 버튼을 그대로 사용하고 싶어.

/연결하려는 api:
사용자가 쓴 글과 사용자의 creator id를 전송하면, 사용자의 글과 관련된 이모티콘 3개를 주는 api 

//최종 요청사항:
기존 파일 구조, 구현한 기능, 사용한 툴 등을 참고하며, 내가 추가하고자 하는 기능을 추가하려면 어떻게 코드를 고쳐야 하는 지 최대한 자세하게 코드를 통해 알려줘.
이때 어떤 파일을 어디에 추가해야 하고, 코드를 구체적으로 어떻게 고쳐야 하는 지를 명확하고 구체적으로 설명해줘.
그리고 파일의 어느 부분을 수정해야 하는 지도 해당 부분의 앞뒤 코드를 보여주는 등의 방법을 써서 좀 더 명확하게 알려줘